#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HumaneSociety
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HumaneSociety")]
	public partial class HSDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdopter(Adopter instance);
    partial void UpdateAdopter(Adopter instance);
    partial void DeleteAdopter(Adopter instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    #endregion
		
		public HSDataDataContext() : 
				base(global::HumaneSociety.Properties.Settings.Default.HumaneSocietyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HSDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HSDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HSDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HSDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Adopter> Adopters
		{
			get
			{
				return this.GetTable<Adopter>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Animal> Animals
		{
			get
			{
				return this.GetTable<Animal>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adopters")]
	public partial class Adopter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Adopter_ID;
		
		private string _Adopter_Name;
		
		private System.Nullable<byte> _Adopter_Age;
		
		private string _Adopter_Address;
		
		private string _Adopter_Phone_Number;
		
		private string _Adopter_Description;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdopter_IDChanging(int value);
    partial void OnAdopter_IDChanged();
    partial void OnAdopter_NameChanging(string value);
    partial void OnAdopter_NameChanged();
    partial void OnAdopter_AgeChanging(System.Nullable<byte> value);
    partial void OnAdopter_AgeChanged();
    partial void OnAdopter_AddressChanging(string value);
    partial void OnAdopter_AddressChanged();
    partial void OnAdopter_Phone_NumberChanging(string value);
    partial void OnAdopter_Phone_NumberChanged();
    partial void OnAdopter_DescriptionChanging(string value);
    partial void OnAdopter_DescriptionChanged();
    #endregion
		
		public Adopter()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adopter_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Adopter_ID
		{
			get
			{
				return this._Adopter_ID;
			}
			set
			{
				if ((this._Adopter_ID != value))
				{
					this.OnAdopter_IDChanging(value);
					this.SendPropertyChanging();
					this._Adopter_ID = value;
					this.SendPropertyChanged("Adopter_ID");
					this.OnAdopter_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adopter_Name", DbType="VarChar(50)")]
		public string Adopter_Name
		{
			get
			{
				return this._Adopter_Name;
			}
			set
			{
				if ((this._Adopter_Name != value))
				{
					this.OnAdopter_NameChanging(value);
					this.SendPropertyChanging();
					this._Adopter_Name = value;
					this.SendPropertyChanged("Adopter_Name");
					this.OnAdopter_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adopter_Age", DbType="TinyInt")]
		public System.Nullable<byte> Adopter_Age
		{
			get
			{
				return this._Adopter_Age;
			}
			set
			{
				if ((this._Adopter_Age != value))
				{
					this.OnAdopter_AgeChanging(value);
					this.SendPropertyChanging();
					this._Adopter_Age = value;
					this.SendPropertyChanged("Adopter_Age");
					this.OnAdopter_AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adopter_Address", DbType="VarChar(120)")]
		public string Adopter_Address
		{
			get
			{
				return this._Adopter_Address;
			}
			set
			{
				if ((this._Adopter_Address != value))
				{
					this.OnAdopter_AddressChanging(value);
					this.SendPropertyChanging();
					this._Adopter_Address = value;
					this.SendPropertyChanged("Adopter_Address");
					this.OnAdopter_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adopter_Phone_Number", DbType="Char(10)")]
		public string Adopter_Phone_Number
		{
			get
			{
				return this._Adopter_Phone_Number;
			}
			set
			{
				if ((this._Adopter_Phone_Number != value))
				{
					this.OnAdopter_Phone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Adopter_Phone_Number = value;
					this.SendPropertyChanged("Adopter_Phone_Number");
					this.OnAdopter_Phone_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adopter_Description", DbType="VarChar(420)")]
		public string Adopter_Description
		{
			get
			{
				return this._Adopter_Description;
			}
			set
			{
				if ((this._Adopter_Description != value))
				{
					this.OnAdopter_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Adopter_Description = value;
					this.SendPropertyChanged("Adopter_Description");
					this.OnAdopter_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adopter_Transaction", Storage="_Transactions", ThisKey="Adopter_ID", OtherKey="Adopter")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Adopter1 = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Adopter1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Transaction_ID;
		
		private System.Nullable<int> _Animal;
		
		private System.Nullable<int> _Adopter;
		
		private System.Nullable<decimal> _Amount_Owed;
		
		private System.Nullable<decimal> _Amount_Paid;
		
		private EntityRef<Adopter> _Adopter1;
		
		private EntityRef<Animal> _Animal1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransaction_IDChanging(int value);
    partial void OnTransaction_IDChanged();
    partial void OnAnimalChanging(System.Nullable<int> value);
    partial void OnAnimalChanged();
    partial void OnAdopterChanging(System.Nullable<int> value);
    partial void OnAdopterChanged();
    partial void OnAmount_OwedChanging(System.Nullable<decimal> value);
    partial void OnAmount_OwedChanged();
    partial void OnAmount_PaidChanging(System.Nullable<decimal> value);
    partial void OnAmount_PaidChanged();
    #endregion
		
		public Transaction()
		{
			this._Adopter1 = default(EntityRef<Adopter>);
			this._Animal1 = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Transaction_ID
		{
			get
			{
				return this._Transaction_ID;
			}
			set
			{
				if ((this._Transaction_ID != value))
				{
					this.OnTransaction_IDChanging(value);
					this.SendPropertyChanging();
					this._Transaction_ID = value;
					this.SendPropertyChanged("Transaction_ID");
					this.OnTransaction_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Animal", DbType="Int")]
		public System.Nullable<int> Animal
		{
			get
			{
				return this._Animal;
			}
			set
			{
				if ((this._Animal != value))
				{
					if (this._Animal1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimalChanging(value);
					this.SendPropertyChanging();
					this._Animal = value;
					this.SendPropertyChanged("Animal");
					this.OnAnimalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adopter", DbType="Int")]
		public System.Nullable<int> Adopter
		{
			get
			{
				return this._Adopter;
			}
			set
			{
				if ((this._Adopter != value))
				{
					if (this._Adopter1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdopterChanging(value);
					this.SendPropertyChanging();
					this._Adopter = value;
					this.SendPropertyChanged("Adopter");
					this.OnAdopterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount_Owed", DbType="Money")]
		public System.Nullable<decimal> Amount_Owed
		{
			get
			{
				return this._Amount_Owed;
			}
			set
			{
				if ((this._Amount_Owed != value))
				{
					this.OnAmount_OwedChanging(value);
					this.SendPropertyChanging();
					this._Amount_Owed = value;
					this.SendPropertyChanged("Amount_Owed");
					this.OnAmount_OwedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount_Paid", DbType="Money")]
		public System.Nullable<decimal> Amount_Paid
		{
			get
			{
				return this._Amount_Paid;
			}
			set
			{
				if ((this._Amount_Paid != value))
				{
					this.OnAmount_PaidChanging(value);
					this.SendPropertyChanging();
					this._Amount_Paid = value;
					this.SendPropertyChanged("Amount_Paid");
					this.OnAmount_PaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adopter_Transaction", Storage="_Adopter1", ThisKey="Adopter", OtherKey="Adopter_ID", IsForeignKey=true)]
		public Adopter Adopter1
		{
			get
			{
				return this._Adopter1.Entity;
			}
			set
			{
				Adopter previousValue = this._Adopter1.Entity;
				if (((previousValue != value) 
							|| (this._Adopter1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adopter1.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Adopter1.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Adopter = value.Adopter_ID;
					}
					else
					{
						this._Adopter = default(Nullable<int>);
					}
					this.SendPropertyChanged("Adopter1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Transaction", Storage="_Animal1", ThisKey="Animal", OtherKey="Animal_ID", IsForeignKey=true)]
		public Animal Animal1
		{
			get
			{
				return this._Animal1.Entity;
			}
			set
			{
				Animal previousValue = this._Animal1.Entity;
				if (((previousValue != value) 
							|| (this._Animal1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal1.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Animal1.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Animal = value.Animal_ID;
					}
					else
					{
						this._Animal = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animals")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Animal_ID;
		
		private string _Name;
		
		private string _Type;
		
		private string _Color;
		
		private System.Nullable<bool> _Has_Shot;
		
		private System.Nullable<byte> _Room;
		
		private System.Nullable<double> _Food_Intake;
		
		private System.Nullable<bool> _Adoption_Status;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnimal_IDChanging(int value);
    partial void OnAnimal_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnHas_ShotChanging(System.Nullable<bool> value);
    partial void OnHas_ShotChanged();
    partial void OnRoomChanging(System.Nullable<byte> value);
    partial void OnRoomChanged();
    partial void OnFood_IntakeChanging(System.Nullable<double> value);
    partial void OnFood_IntakeChanged();
    partial void OnAdoption_StatusChanging(System.Nullable<bool> value);
    partial void OnAdoption_StatusChanged();
    #endregion
		
		public Animal()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Animal_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Animal_ID
		{
			get
			{
				return this._Animal_ID;
			}
			set
			{
				if ((this._Animal_ID != value))
				{
					this.OnAnimal_IDChanging(value);
					this.SendPropertyChanging();
					this._Animal_ID = value;
					this.SendPropertyChanged("Animal_ID");
					this.OnAnimal_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(20)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="VarChar(20)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Has_Shot", DbType="Bit")]
		public System.Nullable<bool> Has_Shot
		{
			get
			{
				return this._Has_Shot;
			}
			set
			{
				if ((this._Has_Shot != value))
				{
					this.OnHas_ShotChanging(value);
					this.SendPropertyChanging();
					this._Has_Shot = value;
					this.SendPropertyChanged("Has_Shot");
					this.OnHas_ShotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room", DbType="TinyInt")]
		public System.Nullable<byte> Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Food_Intake", DbType="Float")]
		public System.Nullable<double> Food_Intake
		{
			get
			{
				return this._Food_Intake;
			}
			set
			{
				if ((this._Food_Intake != value))
				{
					this.OnFood_IntakeChanging(value);
					this.SendPropertyChanging();
					this._Food_Intake = value;
					this.SendPropertyChanged("Food_Intake");
					this.OnFood_IntakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adoption_Status", DbType="Bit")]
		public System.Nullable<bool> Adoption_Status
		{
			get
			{
				return this._Adoption_Status;
			}
			set
			{
				if ((this._Adoption_Status != value))
				{
					this.OnAdoption_StatusChanging(value);
					this.SendPropertyChanging();
					this._Adoption_Status = value;
					this.SendPropertyChanged("Adoption_Status");
					this.OnAdoption_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Transaction", Storage="_Transactions", ThisKey="Animal_ID", OtherKey="Animal")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Animal1 = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Animal1 = null;
		}
	}
}
#pragma warning restore 1591
